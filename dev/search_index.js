var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = MarkovBounds","category":"page"},{"location":"#MarkovBounds.jl","page":"Home","title":"MarkovBounds.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MarkovBounds.jl is a Julia package seeking to automate the setup of moment bounding schemes for the analysis of jump-diffusion processes with the goal of enabling those unfamiliar with moment problems or optimization in general to apply moment bounding schemes regardless. To that end, MarkovBounds.jl automatically translates high-level problem data framing a jump-diffusion process as specified via convenient tools such as Catalyst.jl, Symbolics.jl/ModelingToolkit.jl or DynamicPolynomials.jl into sum-of-squares (SOS) programs and solve them via the existing optimization pipeline in Julia (see SumOfSquares.jl, JuMP and MathOptInterface.jl). The solution of said SOS programs are returned to the user in form of theoretically guaranteed bounds on moments and other key statistics of the process under investigation.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: program structure)","category":"page"},{"location":"#When-should-you-consider-using-moment-bounding-schemes?","page":"Home","title":"When should you consider using moment bounding schemes?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Moment bounding schemes are limited by the capabilities of large-scale semidefinite programming. Given the current state-of-the-art, moment bounding schemes are practically limited to stochastic processes of low to medium dimensionality (< 10 states). Moreover, MarkovBounds.jl currently only supports processes in which the data can be fully characterized in terms of polynomials (see Background for details). ","category":"page"},{"location":"#Stationary-Distributions","page":"Home","title":"Stationary Distributions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Moment bounding schemes have been found to perform remarkably well for the study of the stationary (or ergodic) statistics of stochastic processes. They have been found to provide high quality (often effectively tight) bounds on key statistics such as means, variances, Fano factors and more at a fraction of the computational time needed to provide similarly accurate sample statistics. ","category":"page"},{"location":"#Error-Control","page":"Home","title":"Error Control","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The analysis of jump-diffusion processes relies traditionally on brute force sampling of paths of the process such that a sufficiently large sample of such paths exihibits similar statistics as the generating process. However, even though this approach works remarkably well over a wide range of applications and powerful software tools supporting this approach exist (see e.g. DifferentialEquations.jl), it may break down in certain settings. Most notably, the generation of sample paths can become prohibitively expensive when the process under investigation is highly stiff and/or volatile, rendering simulation expensive and/or convergence of sample statistics to the true statistics slow. In those cases, practitioners tend to fall back on approximation techniques such as tau-leaping, moment closure approximations and many more, which recover tractability at the cost of introducing unverifiable assumptions and an unknown error. Moment bounding schemes can be used to quantify/bound this error by providing hard bounds on key statistics, both in the transient and stationary setting. ","category":"page"},{"location":"#Optimal-Control-Problems","page":"Home","title":"Optimal Control Problems","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Moment bounding schemes extend naturally to the application of (stochastic) optimal control problems with jump-diffusion processes embedded, where they allow to compute hard bounds on the optimal value. Such bounds can either be used in branch-and-bound algorithms for global optimization or simply as a way to certify optimality of a given control policy. Moreover, the bounding problems provide insights to control policy design by yielding a piecewise polynomial subsolution of the value function as byproduct. ","category":"page"},{"location":"#Background-on-Moment-Bounding-Schemes-a-name\"background\"/a","page":"Home","title":"Background on Moment Bounding Schemes <a name=\"background\"></a>","text":"","category":"section"},{"location":"#Jump-Diffusion-Processes","page":"Home","title":"Jump-Diffusion Processes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A jump-diffusion process is dynamical system combining a deterministic evolution of the system state, called drift, with a stochastic component modeling stochastic vibrations, called diffusion, and another stochastic component modeling discrete changes, called jumps. The evolution of the process state x_t over time t through its state space X subset mathbbR^n is governed by the following stochastic differential equation $ dxt = f(xt) \\, dt + g(xt) \\, dWt + \\sum{i=1}^{nR} h(xt) \\, dN{ai(xt)} $ where W_t denotes a standard mathbbR^m-Brownian motion and N_a_i(x_t) a standard Poisson counter with rate a_i(x). The problem data is considered","category":"page"},{"location":"","page":"Home","title":"Home","text":"drift coefficient fmathbbR^n to mathbbR^n\ndiffusion matrix gg^top   mathbbR^n to mathbbR^ntimes n (or diffusion coefficient g:\\mathbb{R}^n \\to \\mathbb{R}^{n \\times m} $)\narrival rates a_i  mathbbR^n to mathbbR, i  = 1dots n_R\njumps h_imathbbR^n to mathbbR^n, i  = 1dots n_R\nstate space X ","category":"page"},{"location":"","page":"Home","title":"Home","text":"A fundamental assumption in MarkovBounds.jl (and to a large extent moment bounding schemes inherently) is that the data of the jump-diffusion process under investigation can be fully characterized in terms of polynomials, i.e., all functions listed above are polynomials (component-wise) and the state space is (or can at least be outer approximated by) a basic closed semialgebraic set. Throughout, we will refer to processes that satisfies this assumption as polynomial jump-diffusion processes. A wide range of problems, in particular in the realm of stochastic chemical kinetics, lend themselves to be modeled in terms of polynomial jump-diffusion processes; if this assumption, however, is not satisfied, a simple but limited workaround is to find approximations of the data in terms of polynomials and apply the moment bounding scheme in a second step.","category":"page"},{"location":"#Moment-Bounding-Schemes","page":"Home","title":"Moment Bounding Schemes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The core idea behind moment bounding schemes is rather simple. But to explain it, we first need to establish some notation: Let y_i(t) = mathbbE left prod_k=1^n x_k(t)^i_k right denote the $ i $ th moment of a polynomial jump-diffusion process as defined the previous section. Similarly, let $ \\mathbf{y}q(t) $  be the truncated sequence of all multivariate moments of the process up to order q in mathbbN, i.e., \\mathbf{y}q(t) = { yi(t) | |i| \\leq q } $. Due to the notrious moment closure problem, \\mathbf{y}q(t)$ cannot in general be computed directly via simple simulation. To circumvent this issue, moment bounding schemes now seek to identify a proxy for mathbfy_q(t), say tildemathbfy_q(t), which minimizes/maximizes a certain statistic of the process under investigation, while ensuring that tildemathbfy_q(t) remains in certain ways consistent with the process under investigation (we will see shortly what that means concretely). Formally, we seek to solve an optimization problem of the form $ \\begin{align} \\inf{\\tilde{\\mathbf{y}}q} \\quad &\\int{0}^T l^\\top \\tilde{\\mathbf{y}}q(t) \\, dt + m^\\top \\tilde{\\mathbf{y}}q(T) \\\n\\text{s.t.} \\quad & \\tilde{\\mathbf{y}}q \\text{ satisfies necessary consistency conditions.} \\end{align} $ The key insight underpinning all moment bounding schemes now is that a suitable choice of \"necessary consistency conditions\" turns the above \"pseudo\" optimization problem into a convex optimization problem known as generalized moment problem. The practical value of this observations lies in the fact that strong convex relaxations of these generalized moment problems are easily constructed and can be readily solved with off-the-shelve semidefinite programming (SDP) solvers such as Mosek, SeDuMi or SDPT3. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"But what are these \"necessary consistency conditions\"? They can be loosely classified as a) reflecting the dynamics of the underlying process and b) the support of its distribution. Conditions of type a) are affine relations that the moments of process have to satisfy. To derive these conditions, note that the (extended) infinitesimal generator $ \\mathcal{A} : w(t,z) \\to \\lim{h\\to 0^+} \\frac{\\mathbb{Ez[w(t + h,x(t + h))]} - w(t,z)}{h} = \\frac{ \\partial w(t,z) }{\\partial t } + f(z)^\\top \\nablaz w(t,z) + \\text{Tr}\\left(gg^\\top(z) \\nablaz^2 w(t,z) \\right) + \\sum{i=1}^{nR} ai(z) w(t, hi(z)) $ maps polynomials to polynomials under the assumption of a polynomial jump diffusion process. Thus, the moments of such a process follow linear, albeit generally underdetermined, dynamics: $ \\frac{d}{dt}\\mathbb{E}\\left[\\prod{k=1}^n xk^{ik}(t) \\right] = \\mathbb{E}\\left[ \\mathcal{A}\\prod{k=1}^n xk^{ik}(t) \\right] \\iff \\frac{dyi}{dt}(t) = ai^\\top \\mathbf{y}q(t) $ Conditions of type b) impose positive semidefiniteness of certain moment matrices. To see that such conditions indeed have to be satisfied by the true moments of the process, consider a one-dimensional process x(t) and a vector of the monomial basis b(x) = 1 x x^2 dots x^d. Then clearly,  the moment matrix $ \\mathbb{E}\\left[ b(x(t)) b(x(t))^\\top \\right] = \\begin{bmatrix} 1 & y1(t) & y2(t)&\\cdots & yd(t) \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    y1(t) & y2(t) & y3(t) & \\cdots & y{d+1}(t) \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    y2(t) & y3(t)  & \\ddots & & y{d+2}(t) \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \\vdots & \\vdots & &  &\\vdots \\\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    yd(t) & y{d+1}(t) & y{d+2}(t) & \\cdots & y{2d}(t)  \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t    \\end{bmatrix} $ must be positive semidefinite as the left-hand-side is. This argument generalizes immediately to the multivariate case. The condition, $ \\mathbb{E}\\left[ b(x(t)) b(x(t))^\\top \\right] \\succeq 0, $ can be viewed as reflecting non-negativity of the probability measure describing the process state at time t. With this intuition in mind, it follows further that for any polynomial p which is non-negative on the state space X, the condition $ \\mathbb{E}[p(x(t))b(x(t)) b(x(t))^\\top] \\succeq 0 $ reflecting the support of the probability distribution on X must also hold. Further observe that conditions of this form translate directly into [Linear Matrix Inequalities](https://en.wikipedia.org/wiki/Linearmatrix_inequality) on the moments of the process, suggesting that the resulting problems can be tackled via SDP. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"For more details and technicalities on moment bounding schemes, please consult one of the references below.","category":"page"},{"location":"#Bounds-on-Stationary-Moments-of-Markov-Processes","page":"Home","title":"Bounds on Stationary Moments of Markov Processes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"stationary_polynomial(MP::MarkovProcess, v::APL, d::Int, solver)\nstationary_mean(MP::MarkovProcess, v::APL, d::Int, solver)\nstationary_mean(rn::ReactionSystem, S0::Dict, S, d::Int, solver,\n                scales = Dict(s => 1 for s in speceies(rn));\n                auto_scaling = false)\nstationary_variance(MP::MarkovProcess, v::APL, d::Int, solver)\nstationary_variance(rn::ReactionSystem, S0, x, d::Int, solver,\n                    scales = Dict(s => 1 for s in speceies(rn));\n                    auto_scaling = false)\nstationary_covariance_ellipsoid(MP::MarkovProcess, v::Vector{<:APL}, d::Int, solver)\nstationary_covariance_ellipsoid(rn::ReactionSystem, S0::Dict, S::AbstractVector, d::Int, solver,\n                                scales = Dict(s => 1 for s in speceies(rn));\n                                auto_scaling = false)","category":"page"},{"location":"#MarkovBounds.stationary_polynomial-Tuple{MarkovProcess, AbstractPolynomialLike, Int64, Any}","page":"Home","title":"MarkovBounds.stationary_polynomial","text":"stationary_polynomial(MP::MarkovProcess, v::APL, d::Int, solver)\n\nreturns a lower bound on the expecation of a polynomial observables v(x) at steady state of the Markov process MP. The bound is computed based on an SOS program over a polynomial of degree at most d; the bounds can be tightened by increasing d. The program is solved with solver.\n\n\n\n\n\n","category":"method"},{"location":"#MarkovBounds.stationary_mean-Tuple{MarkovProcess, AbstractPolynomialLike, Int64, Any}","page":"Home","title":"MarkovBounds.stationary_mean","text":"stationary_mean(MP::MarkovProcess, v::APL, d::Int, solver)\n\nreturns lower and upper bound on the observable v(x) at steady state of the Markov process MP. Bounds are computed based on SOS programs over a polynomial of degree at most d; the bounds can be tightened by increasing d. The program is solved with solver.\n\n\n\n\n\n","category":"method"},{"location":"#MarkovBounds.stationary_mean","page":"Home","title":"MarkovBounds.stationary_mean","text":"stationary_mean(rn::ReactionSystem, S0::Dict, S, d::Int, solver,\n\t\tscales = Dict(s => 1 for s in species(rn));\n\t\tauto_scaling = false)\n\nreturns lower and upper bound on the mean of species S of the reaction network rn with initial condition S0 (for all species!). The bound is based on an SOS program of order d solved via solver; the bounds can be tightened by increasing d.\n\nFor numerical stability, it is recommended to provide scales of the expected magnitude of molecular counts for the different species at steady state. If the system is closed it is also possible to enable auto_scaling which will find the maximum molecular counts for each species under stoichiometry constraints (via LP).\n\nIf the initial condition of the reaction network under investigation is unknown or irrelevant, simply call\n\nstationary_mean(rn::ReactionSystem, S, d::Int, solver,\n\t\tscales = Dict(s => 1 for s in species(rn))).\n\n\n\n\n\n","category":"function"},{"location":"#MarkovBounds.stationary_variance-Tuple{MarkovProcess, AbstractPolynomialLike, Int64, Any}","page":"Home","title":"MarkovBounds.stationary_variance","text":"stationary_variance(MP::MarkovProcess, v::APL, d::Int, solver)\n\nreturns SOS program of degree d for computation of an upper bound on the variance of a polynomial observables v at steady state of the Markov process MP.\n\n\n\n\n\n","category":"method"},{"location":"#MarkovBounds.stationary_variance","page":"Home","title":"MarkovBounds.stationary_variance","text":"stationary_variance(rn::ReactionSystem, S0, x, d::Int, solver,\n\t\t    scales = Dict(s => 1 for s in species(rn));\n\t\t    auto_scaling = false)\n\nreturns upper bound on the variance of species S of the reaction network rn with initial condition S0 (for all species!). The bound is based on an SOS program of degree d solved via solver; the bound can be tightened by increasing d.\n\nFor numerical stability, it is recommended to provide scales of the expected magnitude of molecular counts for the different species at steady state. If the system is closed it is also possible to enable auto_scaling which will find the maximum molecular counts for each species under stoichiometry constraints (via LP).\n\nIf the initial condition of the reaction network under investigation is unknown or irrelevant, simply call\n\nstationary_variance(rn::ReactionSystem, S, d::Int, solver,\n\t\t    scales = Dict(s => 1 for s in species(rn)))\n\n\n\n\n\n","category":"function"},{"location":"#MarkovBounds.stationary_covariance_ellipsoid-Tuple{MarkovProcess, Vector{var\"#s25\"} where var\"#s25\"<:AbstractPolynomialLike, Int64, Any}","page":"Home","title":"MarkovBounds.stationary_covariance_ellipsoid","text":"stationary_covariance_ellipsoid(MP::MarkovProcess, v::Vector{<:APL}, d::Int, solver)\n\nreturns an upper on the volume of the covariance ellipsoid of a vector of polynomial observables v(x), i.e., det(𝔼(v(x)v(x)ᵀ)), at steady state of the Markov process MP. The bounds are computed via an SOS program of degree d, hence can be tightened by increasing d. This computation requires a solver that can deal with exponential cone constraints.\n\n\n\n\n\n","category":"method"},{"location":"#MarkovBounds.stationary_covariance_ellipsoid","page":"Home","title":"MarkovBounds.stationary_covariance_ellipsoid","text":"stationary_covariance_ellipsoid(rn::ReactionSystem, S0::Dict, S::AbstractVector, d::Int, solver,\n\t\t\t\tscales = Dict(s => 1 for s in species(rn));\n\t\t\t\tauto_scaling = false)\n\nreturns an upper on the volume of the covariance ellipsoid of any subset S of the chemical species in the reaction network rn, i.e., det(𝔼(SSᵀ)), at steady state of the associated jump process. The reaction network is assumed to have the deterministic initial state S0 (all species must be included here!). The bounds are computed via an SOS program of degree d, hence can be tightened by increasing d. This computation requires a solver that can deal with exponential cone constraints.\n\nFor numerical stability, it is recommended to provide scales of the expected magnitude of molecular counts for the different species at steady state. If the system is closed it is also possible to enable auto_scaling which will find the maximum molecular counts for each species under stoichiometry constraints (via LP).\n\nIf the initial condition of the reaction network under investigation is unknown or irrelevant, simply call\n\nstationary_covariance_ellipsoid(rn::ReactionSystem, S, d::Int, solver,\n\t\t\t\tscales = Dict(s => 1 for s in species(rn)))\n\n\n\n\n\n","category":"function"},{"location":"#Bounds-on-Transient-Moments-of-Markov-Processes","page":"Home","title":"Bounds on Transient Moments of Markov Processes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"transient_polynomial(MP::MarkovProcess, μ0::Dict, v::APL, d::Int, trange::AbstractVector{<:Real}, solver)\ntransient_mean(MP::MarkovProcess, μ0::Dict, x::APL, d::Int, trange::AbstractVector{<:Real}, solver)\ntransient_mean(rn::ReactionSystem, S0::Dict, S, d::Int, trange::AbstractVector{<:Number}, solver,\n            scales = Dict(s => 1 for s in speceies(rn));\n            auto_scaling = false)\ntransient_variance(MP::MarkovProcess, μ0::Dict, v::APL, d::Int, trange::AbstractVector{<:Real}, solver)\ntransient_variance(rn::ReactionSystem, S0::Dict, S, d::Int, trange::AbstractVector{<:Real}, solver,\n            scales = Dict(s => 1 for s in speceies(rn));\n            auto_scaling = false)\ntransient_covariance_ellipsoid(MP::MarkovProcess, μ0::Dict, v::Vector{APL}, d::Int, trange::AbstractVector{<:Real}, solver)\ntransient_covariance_ellipsoid(rn::ReactionSystem, S0::Dict, S::AbstractVector, d::Int, trange::AbstractVector{<:Real}, solver,\n            scales = Dict(s => 1 for s in speceies(rn));\n            auto_scaling = false)","category":"page"},{"location":"#MarkovBounds.transient_polynomial-Tuple{MarkovProcess, Dict, AbstractPolynomialLike, Int64, AbstractVector{var\"#s25\"} where var\"#s25\"<:Real, Any}","page":"Home","title":"MarkovBounds.transient_polynomial","text":"transient_polynomial(MP::MarkovProcess, μ0::Dict, v::APL, d::Int, trange::AbstractVector{<:Real}, solver)\n\nreturns a lower bound on 𝔼[v(x(T))] where v is a polynomial and x(T) the state of the Markov process MP at time T. μ0 encodes the distribution of the initial state of the process in terms of its moments; specifically, it maps monomials to the respective moments of the initial distribution. trange is an ordered collection of time points used to discretize the time horizon [0,T], i.e., trange[end] = T. Populating trange and increasing d improves the computed bound.\n\n\n\n\n\n","category":"method"},{"location":"#MarkovBounds.transient_mean-Tuple{MarkovProcess, Dict, AbstractPolynomialLike, Int64, AbstractVector{var\"#s25\"} where var\"#s25\"<:Real, Any}","page":"Home","title":"MarkovBounds.transient_mean","text":"transient_mean(MP::MarkovProcess, μ0::Dict, x::APL, d::Int, trange::AbstractVector{<:Real}, solver)\n\nreturns a lower and upper bound on 𝔼[v(x(T))] where v is a polynomial and x(T) the state of the Markov process MP at time T. μ0 encodes the distribution of the initial state of the process in terms of its moments; specifically, it maps monomials to the respective moments of the initial distribution. trange is an ordered collection of time points used to discretize the time horizon [0,T], i.e., trange[end] = T. Populating trange and increasing d improves the computed bounds.\n\n\n\n\n\n","category":"method"},{"location":"#MarkovBounds.transient_mean","page":"Home","title":"MarkovBounds.transient_mean","text":"transient_mean(rn::ReactionSystem, S0::Dict, S, d::Int, trange::AbstractVector{<:Number}, solver,\n\t\tscales = Dict(s => 1 for s in species(rn));\n\t\tauto_scaling = false)\n\nreturns a lower and upper bound on the mean of the molecular count of species S in reaction network rn at time T. S0 refers to the deterministic initial state of the reaction system (including all species!). trange is an ordered collection of time points used to discretize the time horizon [0,T], i.e., trange[end] = T. Populating trange and increasing d improves the computed bounds.\n\nFor numerical stability, it is recommended to provide scales of the expected magnitude of molecular counts for the different species at steady state. If the system is closed it is also possible to enable auto_scaling which will find the maximum molecular counts for each species under stoichiometry constraints (via LP).\n\n\n\n\n\n","category":"function"},{"location":"#MarkovBounds.transient_variance-Tuple{MarkovProcess, Dict, AbstractPolynomialLike, Int64, AbstractVector{var\"#s25\"} where var\"#s25\"<:Real, Any}","page":"Home","title":"MarkovBounds.transient_variance","text":"transient_variance(MP::MarkovProcess, μ0::Dict, v::APL, d::Int, trange::AbstractVector{<:Real}, solver)\n\nreturns an upper bound on 𝔼[v(x(T))²] - 𝔼[v(x(T))]² where v is a polynomial and x(T) the state of the Markov process MP at time T.\n\n\n\n\n\n","category":"method"},{"location":"#MarkovBounds.transient_variance","page":"Home","title":"MarkovBounds.transient_variance","text":"transient_variance(rn::ReactionSystem, S0::Dict, S, d::Int, trange::AbstractVector{<:Real}, solver,\n\t\t    scales = Dict(s => 1 for s in species(rn));\n\t\t\tauto_scaling = false)\n\nreturns an upper bound on the variance of species S in the reaction network rn at time T. S0 refers to the deterministic initial state of the reaction system (including all species!). trange is an ordered collection of time points used to discretize the time horizon [0,T], i.e., trange[end] = T. Populating trange and increasing d improves the computed bounds.\n\nFor numerical stability, it is recommended to provide scales of the expected magnitude of molecular counts for the different species at steady state. If the system is closed it is also possible to enable auto_scaling which will find the maximum molecular counts for each species under stoichiometry constraints (via LP).\n\n\n\n\n\n","category":"function"},{"location":"#MarkovBounds.transient_covariance_ellipsoid-Tuple{MarkovProcess, Dict, Vector{AbstractPolynomialLike}, Int64, AbstractVector{var\"#s25\"} where var\"#s25\"<:Real, Any}","page":"Home","title":"MarkovBounds.transient_covariance_ellipsoid","text":"transient_covariance_ellipsoid(MP::MarkovProcess, μ0::Dict, v::Vector{APL}, d::Int, trange::AbstractVector{<:Real}, solver)\n\nreturns an upper bound on the volume of the covariance ellipsoid det(𝔼(v(x(T))v(x(T))ᵀ)), where v is a polynomial and x(T) the state of the Markov process MP at time T.\n\n\n\n\n\n","category":"method"},{"location":"#MarkovBounds.transient_covariance_ellipsoid","page":"Home","title":"MarkovBounds.transient_covariance_ellipsoid","text":"transient_covariance_ellipsoid(rn::ReactionSystem, S0::Dict, S::AbstractVector, d::Int, trange::AbstractVector{<:Real}, solver,\n\t\t\t\t\t\tscales = Dict(s => 1 for s in species(rn));\n\t\t\t\t\t\tauto_scaling = false)\n\nreturns an upper bound on the volume of the covariance ellipsoid associated with any collection of chemical species in the reaction network rn at time T. S0 refers to the deterministic initial state of the reaction system (including all species!). trange is an ordered collection of time points used to discretize the time horizon [0,T], i.e., trange[end] = T. Populating trange and increasing d improves the computed bounds.\n\nFor numerical stability, it is recommended to provide scales of the expected magnitude of molecular counts for the different species at steady state. If the system is closed it is also possible to enable auto_scaling which will find the maximum molecular counts for each species under stoichiometry constraints (via LP).\n\n\n\n\n\n","category":"function"},{"location":"#Bounds-on-Stochastic-Optimal-Control-Problems","page":"Home","title":"Bounds on Stochastic Optimal Control Problems","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"optimal_control(CP::ControlProcess, μ0::Dict, d::Int, trange::AbstractVector{<:Real}, solver)","category":"page"},{"location":"#MarkovBounds.optimal_control-Tuple{ControlProcess, Dict, Int64, AbstractVector{var\"#s25\"} where var\"#s25\"<:Real, Any}","page":"Home","title":"MarkovBounds.optimal_control","text":"optimal_control(CP::ControlProcess, μ0::Dict, d::Int, trange::AbstractVector{<:Real}, solver)\n\nreturns a lower bound on the objective value of the (stochastic) optimal control problem specified by CP. μ0 encodes information about the distribution of the initial state of the process; specifically, μ0 maps a given monomial to the corresponding moment of the initial distribution. trange refers to an ordered set of time points discretizing the control horizon. trange[end] should coincide with the end of the control horizon, i.e., trange[end] = Inf in case of an infinite horizon problem. The bound is computed via a SOS program of degree d solved with an appropriate method given by solver.\n\nThe bound can be tightened by populating trange or increasing d.\n\n\n\n\n\n","category":"method"}]
}
